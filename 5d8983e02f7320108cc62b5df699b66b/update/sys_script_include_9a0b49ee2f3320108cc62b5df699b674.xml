<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_9736_writenow.WriteNowUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>This script include provides the utility functions used by the WriteNow application</description>
        <name>WriteNowUtils</name>
        <script><![CDATA[var WriteNowUtils = Class.create();
WriteNowUtils.prototype = {
	initialize: function() {},

	buildDictionary: function(table_name) {

		var wnutils = new WriteNowUtils();
		var sourceTable = 'sys_dictionary';
		var sourceQuery = 'name=' + table_name + '^internal_type!=collection^ORinternal_type=NULL^active=true';
		var sourceColumns = ['column_label', 'element', 'sys_updated_by', 'sys_updated_on'];
		var table = wnutils.buildTable(sourceTable, sourceQuery, sourceColumns);
		return table;

	},

	buildBusinessRules: function(table_name) {

		var wnutils = new WriteNowUtils();
		var sourceTable = 'sys_script';
		var sourceQuery = 'collection=' + table_name + '^active=true';
		var sourceColumns = ['name', 'description', 'sys_updated_by', 'sys_updated_on'];
		var table = wnutils.buildTable(sourceTable, sourceQuery, sourceColumns);
		return table;

	},

	buildClientScripts: function(table_name) {

		var wnutils = new WriteNowUtils();
		var sourceTable = 'sys_script_client';
		var sourceQuery = 'table=' + table_name + '^active=true';
		var sourceColumns = ['name', 'description', 'sys_updated_by', 'sys_updated_on'];
		var table = wnutils.buildTable(sourceTable, sourceQuery, sourceColumns);
		return table;

	},

	buildUIpolicies: function(table_name) {

		var wnutils = new WriteNowUtils();
		var sourceTable = 'sys_ui_policy';
		var sourceQuery = 'table=' + table_name + '^active=true';
		var sourceColumns = ['short_description', 'sys_updated_by', 'sys_updated_on'];
		var table = wnutils.buildTable(sourceTable, sourceQuery, sourceColumns);
		return table;

	},

	buildUIactions: function(table_name) {

		var wnutils = new WriteNowUtils();
		var sourceTable = 'sys_ui_action';
		var sourceQuery = 'table=' + table_name + '^active=true';
		var sourceColumns = ['name', 'comments', 'sys_updated_by', 'sys_updated_on'];
		var table = wnutils.buildTable(sourceTable, sourceQuery, sourceColumns);
		return table;

	},

	buildNotifications: function(table_name) {

		var wnutils = new WriteNowUtils();
		var sourceTable = 'sysevent_email_action';
		var sourceQuery = 'collection=' + table_name + '^active=true';
		var sourceColumns = ['name', 'description', 'sys_updated_by', 'sys_updated_on'];
		var table = wnutils.buildTable(sourceTable, sourceQuery, sourceColumns);
		return table;

	},

	buildTable: function(srcTable, encQry, columns) {
		/*
        Parameters: source table, source table encoded query, source table columns
        */
		var whiteColor = sn_pdfgeneratorutils.Color([1, 1, 1]);
		var greyColor = sn_pdfgeneratorutils.Color([0.8, 0.8, 0.8]);
		var headerBgColor = new sn_pdfgeneratorutils.Color([0.4, 0.6, 0.8]);

		var gr = new GlideRecord(srcTable);
		gr.addEncodedQuery(encQry);
		gr.query();

		//build an array dynamically using the length of the columns array
		var columnWidths = [];
		var numCols = columns.length;
		for (var n=0; n<numCols; n++) {
			columnWidths.push(1);
		}

		// declare table by providing width array and Boolean for large table
		var table = new sn_pdfgeneratorutils.Table(columnWidths, false);

		var headerStyle = new sn_pdfgeneratorutils.Style;
		headerStyle.setBackgroundColor(headerBgColor);
		headerStyle.setTextAlignment("text-center");
		headerStyle.setBold();
		headerStyle.setFontColor(whiteColor);

		table.setHeaderStyle(headerStyle);

		//build the table header
		var i;
		for (i = 0; i < columns.length; i++) {
			//set headings from provided elements
			var el = gr.getElement(columns[i]);
			var colHead = el.getLabel();

			var nParagraph = new sn_pdfgeneratorutils.Paragraph(colHead);

			var hdrCell1 = new sn_pdfgeneratorutils.Cell;
			hdrCell1.addParagraph(nParagraph);

			table.addHeaderCell(hdrCell1);
		}

		var row = 0;

		while (gr.next()) {
			var j;
			for (j = 0; j < columns.length; j++) {
				var fieldName = columns[j];
				var cellValue = gr.getValue(fieldName);

				var numCell = new sn_pdfgeneratorutils.Cell;

				var numberParagraph = new sn_pdfgeneratorutils.Paragraph(cellValue);

				numCell.addParagraph(numberParagraph);

				if (row % 2 == 1) {
					table.setDefaultbackGroundColor(greyColor);
				} else {
					table.setDefaultbackGroundColor(whiteColor);
				}

				table.addCell(numCell);


			}
			row = row + 1;
		}

		return table;

	},

	type: 'WriteNowUtils'


};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-05-01 13:18:44</sys_created_on>
        <sys_id>9a0b49ee2f3320108cc62b5df699b674</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name>WriteNowUtils</sys_name>
        <sys_package display_value="WriteNow" source="x_9736_writenow">5d8983e02f7320108cc62b5df699b66b</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="WriteNow">5d8983e02f7320108cc62b5df699b66b</sys_scope>
        <sys_update_name>sys_script_include_9a0b49ee2f3320108cc62b5df699b674</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-05-23 15:14:39</sys_updated_on>
    </sys_script_include>
</record_update>
